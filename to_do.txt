rangements/structurer le code
- moduraliser creation de corpus
- modulariser training et testing 

comprehension algo :
- automatiser plot (creer fonction, peut etre classe dimension_reduction)
- comprendre / reproduire le calcul de l'attribut idf_ de la classe TfidfVectorizer dans sklearn
- comprendre en details et intuitivement tfidf
- comprendre les cas d'usages, avantages et desavantages de tfidf
- faire de chaque colonne pour avoir qque chose qui ressemble a idf_
- visualisation des meilleurs mots (avec les meilleurs scores tfidf) pour un document
- comprendre pourquoi en tfidf on fait un fit_transform sur le train et pas aussi sur le test
- comprendre difference en tfidf de sklearn et tfidf standar

- revoir les matrices de passage et formule de pca et svd (obtenir le dataset dans la nouvelle base par changement de base) DONE : https://en.wikipedia.org/wiki/Principal_component_analysis#Singular_value_decomposition
- plotly : #bizarre verifier pourquoi valeurs changent en fonction du nombre de couleur presente ?

tests/experiences de classification
- sur les differents reweighting de matrices DONE
- reglage fin des hyperparametres
- feature selection
- reduction svd pour "feature selection"  DONE
- methode word2vec sg et cbow entrainement manuel DONE
- methode word2vec sg et cbow transfer learning
- methode word2vec glove transfer learning


depot git/installation/compatibilite sur tout environnement
- creer un fichier requirements pour installer automatiquement toutes les dependances
pip install git+https://github.com/ClaudeCoulombe/FrenchLefffLemmatizer.git4
depot git : https://github.com/ClaudeCoulombe/FrenchLefffLemmatizer/tree/master/french_lefff_lemmatizer

python general notions :
- try except
- differences \n et \r
- comprendre : current_folder = globals()['_dh'][0]
- 